# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.

name: build SSM package

on:
  workflow_dispatch:
    inputs:
      pkg_name:
        description: 'set SSM package name'
        required: false
        default: 'testAWSDistroOTel-Collector'

env:
  IMAGE_NAME: aws-otel-collector
  PACKAGING_ROOT: build/packages
  ECR_REPO: aws/aws-otel-collector
  TF_VAR_aws_access_key_id: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
  TF_VAR_aws_secret_access_key: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}
  TF_VAR_patch: 'true'
  PKG_SIGN_PRIVATE_KEY_NAME: aoc-linux-pkg-signing-gpg-key
  WIN_UNSIGNED_PKG_BUCKET: aoc-aws-signer-unsigned-artifact-src
  WIN_SIGNED_PKG_BUCKET: aoc-aws-signer-signed-artifact-dest
  WIN_UNSIGNED_PKG_FOLDER: OTelCollectorAuthenticode/AuthenticodeSigner-SHA256-RSA
  WIN_SIGNED_PKG_FOLDER: OTelCollectorAuthenticode/AuthenticodeSigner-SHA256-RSA

jobs:

  build:
    runs-on: ubuntu-latest

    steps:
    # Set up building environment, patch the dev repo code on dispatch events.
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.13

    - uses: actions/checkout@v2

    - name: Cache binaries
      id: cached_binaries
      uses: actions/cache@v2
      with:
        key: "cached_binaries_${{ github.run_id }}"
        path: build

    # # Unit Test and attach test coverage badge
    # - name: Unit Test
    #   run: make test

    # - name: Upload Coverage report to CodeCov
    #   uses: codecov/codecov-action@v1.0.12
    #   with:
    #     file: ./coverage.txt

    # Build and archive binaries into cache.
    - name: Build Binaries
      if: steps.cached_binaries.outputs.cache-hit != 'true'
      run: make build

    # upload the binaries to artifact as well because cache@v2 hasn't support windows
    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        name: binary_artifacts
        path: build

  # analyze:
  #   name: CodeQL Analyze
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Initialize CodeQL
  #       uses: github/codeql-action/init@v1
  #       with:
  #         languages: "go"

  #     - name: Perform CodeQL Analysis
  #       uses: github/codeql-action/analyze@v1

  packaging-msi:
    needs: build
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - name: Download built artifacts
        uses: actions/download-artifact@v2
        with:
          name: binary_artifacts
          path: build

      - name: Display structure of downloaded files
        run: ls -R

      - name: Create msi file using candle and light
        run: .\tools\packaging\windows\create_msi.ps1

      - name: Install AWS Cli v2
        run: |
          Invoke-WebRequest -Uri "https://awscli.amazonaws.com/AWSCLIV2.msi" -OutFile "AWSCLIV2.msi"
          msiexec.exe /i AWSCLIV2.msi /passive
          [System.Environment]::SetEnvironmentVariable('Path',$Env:Path + ";C:\\Program Files\\Amazon\\AWSCLIV2",'User')

      # - name: Sign windows artifacts
      #   run: |
      #     $pkgfile = "build\packages\windows\amd64\aws-otel-collector.msi"
      #     $hashobj = Get-FileHash -Algorithm sha256 $pkgfile
      #     $hash = $hashobj.Hash
      #     $create_date = Get-Date -format s
      #     aws s3api put-object "--body" $pkgfile "--bucket" ${{ env.WIN_UNSIGNED_PKG_BUCKET }} "--key" ${{ env.WIN_UNSIGNED_PKG_FOLDER }}/aws-otel-collector-$hash.msi
      #     $objkey = ""
      #     for ($num = 1 ; $num -le 60 ; $num++) { # 60 * 10 = 600s = 10min timeout
      #        Start-Sleep -s 10
      #        Write-Output "Poll number $num"
      #        $objkey = aws s3api list-objects "--bucket" ${{ env.WIN_SIGNED_PKG_BUCKET }} "--prefix" ${{ env.WIN_SIGNED_PKG_FOLDER }}/aws-otel-collector-$hash.msi "--output" text "--query" "Contents[?LastModified>'$create_date'].Key|[0]"
      #        if ($objkey -ne "None") {
      #          Write-Output "Found: $objkey"
      #          break
      #        } else {
      #          Write-Output "$objkey returned, obj not available yet, try again later"
      #        }
      #     }
      #     if ($objkey -eq "None") {
      #       Throw "Could not find the signed artifact"
      #     }
      #     aws s3api get-object "--bucket" ${{ env.WIN_SIGNED_PKG_BUCKET }} "--key" $objkey $pkgfile
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.SIGN_PKG_AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.SIGN_PKG_AWS_SECRET_ACCESS_KEY }}
      #     AWS_DEFAULT_REGION: us-west-2

      # - name: Verify package signature
      #   run: |
      #     $pkgfile = "build\packages\windows\amd64\aws-otel-collector.msi"
      #     $sig = Get-AuthenticodeSignature $pkgfile
      #     $status = $sig.Status
      #     if ($status -ne "Valid") {
      #       Throw "Invalid signature found: $status"
      #     }
      #     Write-Output "Valid signature found from the package"

      - name: Upload the msi
        uses: actions/upload-artifact@v2
        with:
          name: msi_artifacts
          path: build/packages

  packaging-rpm:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Build and archive rpms into cache.
      - uses: actions/checkout@v2

      - name: Cache rpms
        id: cached_rpms
        uses: actions/cache@v2
        with:
          key: "cached_rpms_${{ github.run_id }}"
          path: build/packages

      - name: restore cached binaries
        if: steps.cached_rpms.outputs.cache-hit != 'true'
        uses: actions/cache@v2
        with:
          key: "cached_binaries_${{ github.run_id }}"
          path: build

      - name: Display structure of downloaded files
        run: ls -R

      - name: Build RPM
        if: steps.cached_rpms.outputs.cache-hit != 'true'
        run: |
          ARCH=x86_64 DEST=build/packages/linux/amd64 tools/packaging/linux/create_rpm.sh
          ARCH=aarch64 DEST=build/packages/linux/arm64 tools/packaging/linux/create_rpm.sh

      # - name: Download Package Signing GPG key
      #   run: |
      #     aws secretsmanager get-secret-value --region us-west-2 --secret-id "$PKG_SIGN_PRIVATE_KEY_NAME" | jq -r ".SecretString" > pkg_sign_private.key
      #     md5sum pkg_sign_private.key
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.SIGN_PKG_AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.SIGN_PKG_AWS_SECRET_ACCESS_KEY }}

      # - name: Import Package Signing GPG Key
      #   run: |
      #     gpg --import pkg_sign_private.key
      #     gpg --list-keys
      #     gpg --armor --export -a "aws-otel-collector@amazon.com" > pkg_sign_public.key
      #     rpm --import pkg_sign_public.key
      #     echo "%_gpg_name aws-otel-collector@amazon.com" > ~/.rpmmacros
      #     md5sum pkg_sign_public.key
      #     shred -fuvz pkg_sign_private.key

      # - name: Sign RPM Pakcage
      #   run: |
      #     rpmsign --addsign build/packages/linux/*/*.rpm

      # - name: Remove Package Signing GPG Key from local GPG Key Ring
      #   run: |
      #     gpg --fingerprint --with-colons aws-otel-collector@amazon.com grep "^fpr" | sed -n 's/^fpr:::::::::\([[:alnum:]]\+\):/\1/p' | xargs gpg --batch --yes --delete-secret-keys
      #     gpg --list-secret-keys

  packaging-deb:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Build and archive debs into cache.
      - uses: actions/checkout@v2

      - name: Cache Debs
        id: cached_debs
        uses: actions/cache@v2
        with:
          key: "cached_debs_${{ github.run_id }}"
          path: build/packages

      - name: restore cached binaries
        if: steps.cached_debs.outputs.cache-hit != 'true'
        uses: actions/cache@v2
        with:
          key: "cached_binaries_${{ github.run_id }}"
          path: build

      - name: Build Debs
        if: steps.cached_debs.outputs.cache-hit != 'true'
        run: |
          ARCH=amd64 TARGET_SUPPORTED_ARCH=x86_64 DEST=build/packages/debian/amd64 tools/packaging/debian/create_deb.sh
          ARCH=arm64 TARGET_SUPPORTED_ARCH=aarch64 DEST=build/packages/debian/arm64 tools/packaging/debian/create_deb.sh

      # - name: Download Package Signing GPG key
      #   run: |
      #     aws secretsmanager get-secret-value --region us-west-2 --secret-id "$PKG_SIGN_PRIVATE_KEY_NAME" | jq -r ".SecretString" > pkg_sign_private.key
      #     md5sum pkg_sign_private.key
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.SIGN_PKG_AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.SIGN_PKG_AWS_SECRET_ACCESS_KEY }}

      # - name: Import Package Signing GPG Key
      #   run: |
      #     gpg --import pkg_sign_private.key
      #     gpg --list-secret-keys
      #     shred -fuvz pkg_sign_private.key

      # - name: Sign DEB Pakcage
      #   run: |
      #     sudo apt install -y dpkg-sig
      #     dpkg-sig --sign origin -k "aws-otel-collector@amazon.com" build/packages/debian/*/*.deb

      # - name: Remove Package Signing GPG Key from local GPG Key Ring
      #   run: |
      #     gpg --fingerprint --with-colons aws-otel-collector@amazon.com grep "^fpr" | sed -n 's/^fpr:::::::::\([[:alnum:]]\+\):/\1/p' | xargs gpg --batch --yes --delete-secret-keys
      #     gpg --list-secret-keys

  packaging-image:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Build and archive image into cache
      - uses: actions/checkout@v2

      - name: Cache Image
        id: cached_image
        uses: actions/cache@v2
        with:
          key: "cached_image_${{ github.run_id }}"
          path: "${{ env.PACKAGING_ROOT }}"

      - name: restore cached binaries
        if: steps.cached_image.outputs.cache-hit != 'true'
        uses: actions/cache@v2
        with:
          key: "cached_binaries_${{ github.run_id }}"
          path: build

      - name: Build Image
        if: steps.cached_image.outputs.cache-hit != 'true'
        run: docker build -t $IMAGE_NAME -f cmd/awscollector/Dockerfile .

      - name: Extract the Image file
        if: steps.cached_image.outputs.cache-hit != 'true'
        run: |
          mkdir -p $PACKAGING_ROOT
          docker save --output $PACKAGING_ROOT/$IMAGE_NAME.tar $IMAGE_NAME

  packaging-ssm:
    runs-on: ubuntu-latest
    needs: [packaging-rpm, packaging-deb, packaging-msi]
    steps:
      # Build and archive SSM package into cache.
      - uses: actions/checkout@v2

      - name: Cache SSM files
        id: cached_ssm
        uses: actions/cache@v2
        with:
          key: "cached_ssm_${{ github.run_id }}"
          path: build/packages/ssm

      - name: Restore cached rpms
        if: steps.cached_ssm.outputs.cache-hit != 'true'
        uses: actions/cache@v2
        with:
          key: "cached_rpms_${{ github.run_id }}"
          path: build/packages

      - name: Restore cached debs
        if: steps.cached_ssm.outputs.cache-hit != 'true'
        uses: actions/cache@v2
        with:
          key: "cached_debs_${{ github.run_id }}"
          path: build/packages

      - name: Download built artifacts
        if: steps.cached_ssm.outputs.cache-hit != 'true'
        uses: actions/download-artifact@v2
        with:
          name: msi_artifacts
          path: build/packages

      - run: ls -R

      - name: Create zip file and manifest for SSM package
        if: steps.cached_ssm.outputs.cache-hit != 'true'
        run: |
          # use a version with github run id as same as e2etest-preparation
          rm -rf build/packages/ssm
          python3 tools/ssm/ssm_manifest.py "`cat VERSION`-${{ github.run_id }}"

  e2etest-preparation:
    runs-on: ubuntu-latest
    needs: [packaging-rpm, packaging-deb, packaging-msi, packaging-image, packaging-ssm]
    outputs:
      version: ${{ steps.versioning.outputs.version }}
    steps:
      # Archive all the packages into one, and build a unique version number for e2etesting
      - uses: actions/checkout@v2

      - name: Cache the packages
        id: cached_packages
        uses: actions/cache@v2
        with:
          key: "cached_packages_${{ github.run_id }}"
          path: build/packages

      - name: Restore cached rpms
        if: steps.cached_packages.outputs.cache-hit != 'true'
        uses: actions/cache@v2
        with:
          key: "cached_rpms_${{ github.run_id }}"
          path: build/packages

      - name: Restore cached debs
        if: steps.cached_packages.outputs.cache-hit != 'true'
        uses: actions/cache@v2
        with:
          key: "cached_debs_${{ github.run_id }}"
          path: build/packages

      - name: Restore cached image
        if: steps.cached_packages.outputs.cache-hit != 'true'
        uses: actions/cache@v2
        with:
          key: "cached_image_${{ github.run_id }}"
          path: build/packages

      - name: Download built artifacts
        if: steps.cached_packages.outputs.cache-hit != 'true'
        uses: actions/download-artifact@v2
        with:
          name: msi_artifacts
          path: build/packages

      - name: Restore cached ssm
        if: steps.cached_packages.outputs.cache-hit != 'true'
        uses: actions/cache@v2
        with:
          key: "cached_ssm_${{ github.run_id }}"
          path: build/packages/ssm

      - run: ls -R

      - name: Versioning for testing
        id: versioning
        run: |
          # build a version with github run id so that we can distingush each build for integ-test
          Version="`cat VERSION`-$GITHUB_RUN_ID"
          echo $Version > build/packages/VERSION
          cat build/packages/VERSION
          echo "::set-output name=version::$Version"

      - name: prepare CI&CD stack
        run: |
          cp .aoc-stack-test.yml build/packages/
          cp .aoc-stack-release.yml build/packages/

  e2etest-release:
    runs-on: ubuntu-latest
    needs: [e2etest-preparation]

    steps:
      - uses: actions/checkout@v2

      - name: Cache if success
        id: e2etest-release
        uses: actions/cache@v2
        with:
          path: |
            VERSION
          key: e2etest-release-${{ github.run_id }}

      - name: Configure AWS Credentials
        if: steps.e2etest-release.outputs.cache-hit != 'true'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}
          aws-region: us-west-2

      - name: restore cached rpms
        if: steps.e2etest-release.outputs.cache-hit != 'true'
        uses: actions/cache@v2
        with:
          path: build/packages
          key: "cached_packages_${{ github.run_id }}"

      - name: Create SSM package
        if: steps.e2etest-release.outputs.cache-hit != 'true'
        run: |
          ssm_pkg_version=`cat build/packages/VERSION`
          ssm_pkg_version="${ssm_pkg_version:1}"
          python3 tools/ssm/ssm_manifest.py ${ssm_pkg_version}
          aws s3 cp build/packages/ssm s3://bucket20210116/output --recursive
          bash tools/ssm/ssm_create.sh ${{ github.event.inputs.pkg_name }} ${ssm_pkg_version} bucket20210116/output

      # - name: upload to s3 in the testing stack
      #   run: s3_bucket_name=bucket20210116 upload_to_latest=0 bash tools/release/s3-release.sh

      - name: Login ECR
        if: steps.e2etest-release.outputs.cache-hit != 'true'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: upload to ECR
        if: steps.e2etest-release.outputs.cache-hit != 'true'
        run: |
          docker load < build/packages/$IMAGE_NAME.tar
          docker tag $IMAGE_NAME ${{ steps.login-ecr.outputs.registry }}/$ECR_REPO:${{ needs.e2etest-preparation.outputs.version }}
          docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPO:${{ needs.e2etest-preparation.outputs.version }}

  release-candidate:
    runs-on: ubuntu-latest
    needs: [e2etest-release]
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}
          aws-region: us-west-2

      - name: restore cached packages
        uses: actions/cache@v2
        with:
          path: build/packages
          key: "cached_packages_${{ github.run_id }}"

      - name: prepare production version
        run: |
          TESTING_VERSION=`cat build/packages/VERSION`
          VERSION=`echo $TESTING_VERSION | awk -F "-" '{print $1}'`
          echo $VERSION > build/packages/VERSION
          echo $GITHUB_SHA > build/packages/GITHUB_SHA
          echo $TESTING_VERSION > build/packages/TESTING_VERSION

      - name: upload packages as release candidate on s3
        run: |
          tar czvf $GITHUB_SHA.tar.gz build
          aws s3 cp $GITHUB_SHA.tar.gz s3://bucket20210116/aoc-build/$GITHUB_SHA.tar.gz
